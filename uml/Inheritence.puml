@startuml
'https://plantuml.com/class-diagram
left to right direction
top to bottom direction
abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # score: int
    # shootNum:int
    # power:int
    # direction:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp,int score)
    + decreaseHp(int decrease):void
    + getHp():int
    + getPower(): int
    + getScore(): int
    + getShootNum(): int
    + getDirection(): int
    + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {

    - {static} instance:HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance():instance
    + forward():void
    + setShootNum(int num):void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- HeroAircraft

class EnemyCreatorPattern
{
 + CreatorPattern(ist<AbstractEnemy> enemyAircrafts,int enemyMaxNumber): void
}

abstract AbstractEnemy
{
    + AbstractEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + {abstract} shoot():List<BaseBullet>
}

interface EnemyCreator
{

    + {abstract} createEnemy(): AbstractEnemy
}

EnemyCreatorPattern ..> AbstractEnemy
EnemyCreatorPattern ..> EnemyCreator

class MobEnemy
{
   + shoot(): List<BaseBullet>
   + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
}

class EliteEnemy
{
   + shoot(): List<BaseBullet>
   + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
}

class BossEnemy
{
    + shoot(): List<BaseBullet>
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
}

class MobCreator
{

    - locationX: int
    - locationY：int
    - speedX: int
    - speedY: int
    - hp: int
    - score: int
    + createEnemy():AbstractEnemy
    + getScore(): int
    + getHp(): int
    + getLocationX(): int
    + getLocationY(): int
    + getSpeedX(): int
    + getSpeedY(): int
}


class ELiteCreator
{
     - locationX: int
     - locationY：int
     - speedX: int
     - speedY: int
     - hp: int
     - score: int
     + createEnemy():AbstractEnemy
     + getScore(): int
     + getHp(): int
     + getLocationX(): int
     + getLocationY(): int
     + getSpeedX(): int
     + getSpeedY(): int
}

class BossCreator
{
    - locationX: int
    - locationY：int
    - speedX: int
    - speedY: int
    - hp: int
    - score: int
    + createEnemy():AbstractEnemy
    + getScore(): int
    + getHp(): int
    + getLocationX(): int
    + getLocationY(): int
    + getSpeedX(): int
    + getSpeedY(): int
}

EnemyCreator <|.. MobCreator
EnemyCreator <|.. ELiteCreator
EnemyCreator <|.. BossCreator

AbstractEnemy <|-- MobEnemy
AbstractEnemy <|-- EliteEnemy
AbstractEnemy <|-- BossEnemy



AbstractAircraft <|-- AbstractEnemy


class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + shoot():List<BaseBullet>
}

class EliteEnemy {
       - shootNum:int
       - power:int
       - direction:int
       + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
       + shoot():List<BaseBullet>
}


class BossEnemy {
       - shootNum:int
       - power:int
       - direction:int
       + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
       + shoot():List<BaseBullet>


abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

class PropCreatorPattern
{
 + CreatorPattern(List<AbstractProps> props): void
}

abstract class AbstractProps
{
 + AbstractProps (int locationX,int locationY, int speedX, int speedY )
 + {abstract} getEffect(HeroAircraft heroAircraft, List<AbstractEnemy> enemyAircrafts, List<BaseBullet> enemyBullets):int
}
interface PropCreator
{
 + {abstract} createProp(): AbstractProps
}

PropCreatorPattern..>AbstractProps
PropCreatorPattern..> PropCreator

class Blood
{
    - power:int
    + Blood(int locationX, int locationY, int speedX, int speedY)
    + getEffect(HeroAircraft heroAircraft, List<AbstractEnemy> enemyAircrafts, List<BaseBullet> enemyBullets): int
    + getPower(): int
}

class Bomb
{
    + Bomb(int locationX, int locationY, int speedX, int speedY)
    + getEffect(HeroAircraft heroAircraft, List<AbstractEnemy> enemyAircrafts, List<BaseBullet> enemyBullets): int
}

class BulletProp
{
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + getEffect(HeroAircraft heroAircraft, List<AbstractEnemy> enemyAircrafts, List<BaseBullet> enemyBullets): int
}

class BloodCreator
{

    - locationX: int
    - locationY：int
    - speedX: int
    - speedY: int
    + createProp():AbstractProps
}


class BombCreator
{
    - locationX: int
    - locationY：int
    - speedX: int
    - speedY: int
    + createProp():AbstractProps
}

class BulletCreator
{
    - locationX: int
    - locationY：int
    - speedX: int
    - speedY: int
    + createProp():AbstractProps
}

PropCreator <|.. BloodCreator
PropCreator <|.. BombCreator
PropCreator <|.. BulletCreator

AbstractProps <|-- Blood
AbstractProps <|-- Bomb
AbstractProps <|-- BulletProp

BloodCreator <.. Blood
BombCreator <.. Bomb
BulletCreator <..  BulletProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProps

@enduml